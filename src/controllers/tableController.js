import asyncHandler from 'express-async-handler';
import Table from '../models/Table.js';
import Restaurant from '../models/Restaurant.js';
import OrderGroup from '../models/OrderGroup.js';

/**
 * @swagger
 * /tables/add:
 *   post:
 *     summary: Add a new table (Admin only)
 *     tags: [Tables]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: number
 *                 description: Table number (e.g., 1, 2, 3)
 *               table_url:
 *                 type: string
 *                 description: URL for the table (used for QR code by frontend)
 *               encode:
 *                 type: string
 *                 description: Encoded string generated by frontend
 *     responses:
 *       201:
 *         description: Table created
 *       400:
 *         description: Bad request
 *       403:
 *         description: Admin access required
 */
const addTable = asyncHandler(async (req, res) => {
  const { name, table_url, encode } = req.body;

  // Check if restaurant_id exists in req.user
  if (!req.user || !req.user.restaurant_id) {
    res.status(401);
    throw new Error('Not authorized, restaurant ID not found in user session');
  }

  // Validate restaurant
  const restaurant = await Restaurant.findById(req.user.restaurant_id);
  if (!restaurant) {
    res.status(404);
    throw new Error('Restaurant not found');
  }

  // Validate required fields
  if (!name || !table_url) {
    res.status(400);
    throw new Error('Name and table_url are required');
  }

  // Create new table with default status "Trống"
  const table = new Table({
    restaurant_id: req.user.restaurant_id,
    name,
    table_url,
    encode: encode || null,
    status: 'Trống',
  });

  await table.save();

  // Populate restaurant for response
  const populatedTable = await Table.findById(table._id).populate(
    'restaurant_id',
    'name slug'
  );

  res.status(201).json({
    success: true,
    data: populatedTable,
  });
});

/**
 * @swagger
 * /tables:
 *   get:
 *     summary: Get all tables (Public)
 *     tags: [Tables]
 *     responses:
 *       200:
 *         description: List of tables sorted by name
 */
const getTables = asyncHandler(async (req, res) => {
  const tables = await Table.find()
    .populate('restaurant_id', 'name slug')
    .sort({ name: 1 }); // Sắp xếp theo name tăng dần

  res.status(200).json({
    success: true,
    count: tables.length,
    data: tables.map(table => ({
      _id: table._id,
      restaurant_id: {
        id: table.restaurant_id._id,
        name: table.restaurant_id.name,
        slug: table.restaurant_id.slug,
      },
      name: table.name,
      table_url: table.table_url,
      encode: table.encode,
      status: table.status,
      current_order_group: table.current_order_group,
      createdAt: table.createdAt,
      updatedAt: table.updatedAt,
    })),
  });
});

/**
 * @swagger
 * /tables/{id}:
 *   get:
 *     summary: Get a table by ID (Public)
 *     tags: [Tables]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Table details
 *       404:
 *         description: Table not found
 */
const getTableById = asyncHandler(async (req, res) => {
  const table = await Table.findById(req.params.id).populate(
    'restaurant_id',
    'name slug'
  );

  if (!table) {
    res.status(404);
    throw new Error('Table not found');
  }

  res.status(200).json({
    success: true,
    data: {
      _id: table._id,
      restaurant_id: {
        id: table.restaurant_id._id,
        name: table.restaurant_id.name,
        slug: table.restaurant_id.slug,
      },
      name: table.name,
      table_url: table.table_url,
      encode: table.encode,
      status: table.status,
      createdAt: table.createdAt,
      updatedAt: table.updatedAt,
    },
  });
});

/**
 * @swagger
 * /tables/update/{id}:
 *   put:
 *     summary: Update a table (Admin only)
 *     tags: [Tables]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               table_url:
 *                 type: string
 *                 description: URL for the table
 *               encode:
 *                 type: string
 *                 description: Encoded string
 *               status:
 *                 type: string
 *                 enum: ['Trống', 'Đang sử dụng']
 *     responses:
 *       200:
 *         description: Table updated
 *       404:
 *         description: Table not found
 *       403:
 *         description: Admin access required
 */
const updateTable = asyncHandler(async (req, res) => {
  const { table_url, encode, status } = req.body;

  const table = await Table.findById(req.params.id);
  if (!table) {
    res.status(404);
    throw new Error('Table not found');
  }

  // Check if table belongs to the user's restaurant
  if (table.restaurant_id.toString() !== req.user.restaurant_id.toString()) {
    res.status(403);
    throw new Error('Table does not belong to your restaurant');
  }

  // Update fields (name is not allowed to change)
  if (table_url) table.table_url = table_url;
  if (encode !== undefined) table.encode = encode || null;
  if (status) table.status = status;

  await table.save();

  // Populate restaurant for response
  const populatedTable = await Table.findById(table._id).populate(
    'restaurant_id',
    'name slug'
  );

  res.status(200).json({
    success: true,
    data: populatedTable,
  });
});

/**
 * @swagger
 * /tables/delete/{id}:
 *   delete:
 *     summary: Delete a table (Admin only)
 *     tags: [Tables]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Table deleted
 *       404:
 *         description: Table not found
 *       403:
 *         description: Admin access required
 */
const deleteTable = asyncHandler(async (req, res) => {
  const table = await Table.findById(req.params.id);
  if (!table) {
    res.status(404);
    throw new Error('Table not found');
  }

  // Check if table belongs to the user's restaurant
  if (table.restaurant_id.toString() !== req.user.restaurant_id.toString()) {
    res.status(403);
    throw new Error('Table does not belong to your restaurant');
  }

  // Check if table is in use
  if (table.status === 'Đang sử dụng' || table.current_order_group) { // Fixed: Changed from current_order to current_order_group
    res.status(400);
    throw new Error('Cannot delete a table that is in use');
  }

  await Table.findOneAndDelete({ _id: req.params.id });

  res.status(200).json({
    success: true,
    message: 'Table deleted',
  });
});

/**
 * @swagger
 * /tables/{tableId}/orders:
 *   get:
 *     summary: Get all orders for a table (Public)
 *     tags: [Tables]
 *     parameters:
 *       - in: path
 *         name: tableId
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: List of orders for the table
 *       404:
 *         description: Table not found
 */
const getTableOrders = asyncHandler(async (req, res) => {
  const table = await Table.findById(req.params.tableId);
  if (!table) {
    res.status(404);
    throw new Error('Table not found');
  }

  const orderGroup = await OrderGroup.findById(table.current_order_group)
    .populate({
      path: 'orders',
      populate: { path: 'items.item_id', select: 'name price' },
    });

  if (!orderGroup) {
    return res.status(200).json({
      success: true,
      count: 0,
      data: [],
    });
  }

  // Sort orders by createdAt (ascending)
  const orders = orderGroup.orders.sort((a, b) => a.createdAt - b.createdAt);

  res.status(200).json({
    success: true,
    count: orders.length,
    data: orders,
  });
});

/**
 * @swagger
 * /tables/name/{name}:
 *   get:
 *     summary: Get a table by name (Public)
 *     tags: [Tables]
 *     parameters:
 *       - in: path
 *         name: name
 *         required: true
 *         schema:
 *           type: number
 *         description: Table number (e.g., 1, 2, 3)
 *     responses:
 *       200:
 *         description: Table details
 *       404:
 *         description: Table not found
 */
const getTableByName = asyncHandler(async (req, res) => {
  const { name } = req.params;

  // Validate that name is an integer
  if (!Number.isInteger(Number(name))) {
    res.status(400);
    throw new Error('Name must be an integer');
  }

  // Find table by name and populate restaurant_id
  const table = await Table.findOne({ name: Number(name) })
    .populate('restaurant_id', 'name slug')
    .populate('current_order_group', 'payment_status total_amount'); // Populate order group if needed

  if (!table) {
    res.status(404);
    throw new Error('Table not found');
  }

  res.status(200).json({
    success: true,
    data: {
      _id: table._id,
      restaurant_id: {
        id: table.restaurant_id._id,
        name: table.restaurant_id.name,
        slug: table.restaurant_id.slug,
      },
      name: table.name,
      table_url: table.table_url,
      encode: table.encode,
      status: table.status,
      current_order_group: table.current_order_group,
      createdAt: table.createdAt,
      updatedAt: table.updatedAt,
    },
  });
});

export { addTable, getTables, getTableById, updateTable, deleteTable, getTableOrders, getTableByName };